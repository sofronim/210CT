class Node(object):  
	      def __init__(self, value):  
	          self.value=value  
	          self.next=None  
	          self.prev=None  
	  
class List(object):  
	      def __init__(self):  
	          self.head=None  
	          self.tail=None  
	      def insert(self,n,x):  
	          #Not actually perfect: how do we prepend to an existing list?  
	          if n!=None:  
	              x.next=n.next  
	              n.next=x  
	              x.prev=n  
	              if x.next!=None:  
	                  x.next.prev=x                
	          if self.head==None:  
	              self.head=self.tail=x  
	              x.prev=x.next=None  
	          elif self.tail==n:  
	              self.tail=x  
	      def delete(self,n): #defining delete function  
	        if  n.prev != None : #n previous doesnt exist  
	            n.prev.next= n.next #previous of next will be next  
	        else:  
	              l.head = n.next  
	        if n.next != None : # if next doesnt exist  
	              n.next.prev = n.prev #next of the previous will be the previous  
	        else:  
	            l.tail = n.prev  
	      def display(self):  
	          values=[]  
	          n=self.head  
	          while n!=None:  
	              values.append(str(n.value))  
	              n=n.next  
	          print ("List:",",".join(values))  
	            
if __name__ == '__main__':  
	      n = Node(1)  
	      m = Node(2)  
	      k = Node(3)  
	      l = List()  
	      l.insert(None,n)  
	      l.insert(l.head,m)  
	      l.insert(l.head,k)  
	      l.display()  
	      l.delete(m)  
	      l.delete(n)  
	      l.delete(k)  
	      l.display()
